{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":97919,"databundleVersionId":11694977,"sourceType":"competition"}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# üéß Audio Grammar Evaluation & Scoring Pipeline\n\nThis project is a Streamlit-integrated Python application that transcribes audio using `faster-whisper`, evaluates grammar accuracy using `language_tool_python`, and assigns scores based on grammatical correctness.\n\n## üì¶ Dependencies\n\n    Ensure all dependencies are installed:\n\n```\nbash\npip install whisper language_tool_python streamlit\npip uninstall whisper -y\npip install -U openai-whisper\npip install faster-whisper\n```\n\n\n#### üß† Modules Used \n\n    üìå faster-whisper: Lightweight and fast audio transcription tool.\n    \n    üìå language_tool_python: Grammar and style checker.\n    \n    üìå Streamlit: Web app interface.\n    \n    üìå Pandas: Data storage and export.\n    \n    üìå TQDM: (optional) Progress bar for large audio file sets.\n    \n    üìåTempfile and OS: For handling file paths and I/O.","metadata":{}},{"cell_type":"code","source":"\nimport streamlit as st \nfrom faster_whisper import WhisperModel\nimport language_tool_python \nimport tempfile\nfrom tqdm import tqdm \nimport pandas as pd\nimport os\ntool = language_tool_python.LanguageTool('en-US')","metadata":{"_uuid":"e50289b3-8ee6-4a73-a660-670598ee6bbd","_cell_guid":"046b2e18-5b83-45a7-b679-c22ba33c1794","trusted":true,"collapsed":false,"_kg_hide-output":true,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## üß¨ Functions Explained","metadata":{}},{"cell_type":"markdown","source":"### ``` grammar_analysis(text) ```\n\n    Calculates grammar score based on number of grammar errors per word using LanguageTool.\n","metadata":{}},{"cell_type":"code","source":"def grammar_analysis(text):\n  tool =  language_tool_python.LanguageTool(\"en-US\")\n  matches = tool.check(text)\n  \n  errors = len(matches)\n  total_words = len(text.split())\n  score = max(0 , 100 - (errors / max(1 , total_words)) * 100) \n\n  error_details = [{\n      \"message\": m.message,\n      \"ruleId\": m.ruleId,\n      \"replacements\": m.replacements\n  } for m in matches]\n  \n  return score  , errors","metadata":{"_uuid":"b2840843-9e59-4ada-b277-0cce4856eb6e","_cell_guid":"50071f95-e067-4a28-abc6-1d3511ddfa87","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ```load_model()```\n","metadata":{}},{"cell_type":"code","source":"@st.cache_resource\ndef load_model():\n    model = WhisperModel(\"base\", device =\"cpu\" , compute_type=\"int8\")  # or \"float16\" for GPU\n    return model","metadata":{"_uuid":"6ee12ed8-4d42-482b-9bf3-57654e56f975","_cell_guid":"5c625032-4c90-4820-80ff-b0a442cf3570","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.787Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ```transcribe_audio(path)```","metadata":{}},{"cell_type":"code","source":"def transcribe_audio(path):\n    model = load_model()\n    segments, _ = model.transcribe(path)\n    text = \" \".join([segment.text for segment in segments])\n    return text","metadata":{"_uuid":"ec297edb-bee1-4cbb-a103-92a3aa41f00a","_cell_guid":"63770fc9-a110-4512-9cf5-9d7cec9e52ae","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.788Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ```get_grammar_errors(text)```","metadata":{}},{"cell_type":"code","source":"def get_grammar_errors(text):\n    matches = tool.check(text)\n    errors = []\n    for m in matches:\n        errors.append({\n            'message': m.message,\n            'incorrect_text': text[m.offset : m.offset + m.errorLength],\n            # 'suggestions': m.replacements\n        })\n    # return errors","metadata":{"_uuid":"37c6e792-ea7c-4c28-8f00-64f998955b2f","_cell_guid":"1b6390b1-4efa-49ca-88a2-fd14c46534af","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.788Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ```score_audio()```","metadata":{}},{"cell_type":"code","source":"def score_audio(text):\n    matches = tool.check(text)\n    num_errors = len(matches)\n    raw_score = max(0, 100- num_errors * 5)\n\n    if 100 >= raw_score >= 90:\n        return 5\n    elif 90> raw_score >= 75:\n        return 4\n    elif 75 > raw_score >= 50:\n        return 3\n    elif 50 > raw_score >= 25:\n        return 2\n    elif 25> raw_score:\n        return 1","metadata":{"_uuid":"77b8737d-a7a2-4700-930d-49343ff58baa","_cell_guid":"f56f1e90-f317-4716-834b-4d1885c1f542","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.788Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ``` process_audio() ```","metadata":{}},{"cell_type":"code","source":"# Processing all .wav files in a directory\ndef process_audios(audio_dir):\n    results = []\n    i = 1 \n    for file in os.listdir(audio_dir):\n        if file.endswith(\".wav\") or file.endswith(\".mp3\"):\n            path = os.path.join(audio_dir, file)\n            # try:\n            # print(\"model transcription began\")\n            text = transcribe_audio(path)\n            # print(\"text scoring began\")\n            score = score_audio(text)\n            # print(\"results added to df\")\n            # print(text)\n            # print(score)\n            results.append({\"file_name\": file, \"audio_score\": score})\n            # except Exception as e:\n                # print(f\"Error processing {file}: {e}\")\n    return pd.DataFrame(results)","metadata":{"_uuid":"306e03bf-73b2-4489-9d03-38bf3c005135","_cell_guid":"2327cd42-c6cb-4305-a8c0-0297c560a343","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.789Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## üìÅ Audio Directories","metadata":{}},{"cell_type":"code","source":"train = \"/kaggle/input/shl-intern-hiring-assessment/dataset/audios_train\"\ntest = \"/kaggle/input/shl-intern-hiring-assessment/dataset/audios_train\"","metadata":{"_uuid":"06546e2e-af1e-43d6-b166-39814d7edf08","_cell_guid":"5816efe6-2157-415d-8673-a9a84be6e06e","trusted":true,"collapsed":false,"execution":{"execution_failed":"2025-04-06T11:57:52.789Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## üíæ Save Results","metadata":{}},{"cell_type":"code","source":"os.makedirs(\"/kaggle/working/train_results\"  , exist_ok = True)\ntrain_df = process_audios(train)\n#processing complete\ntrain_df.to_csv(\"/kaggle/working/train_results/train.csv\", index=False)\n\ntest_df = process_audios(test)\ntest_df.to_csv(\"/kaggle/working/test_results/test.csv\", index=False)","metadata":{"_uuid":"df71e679-0a38-43a5-92ed-a298666100e9","_cell_guid":"2d2294a4-6303-4fb9-babc-993835546030","trusted":true,"execution":{"execution_failed":"2025-04-06T11:57:52.790Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## ‚ñ∂Ô∏è View Sample Implementation ","metadata":{}},{"cell_type":"code","source":"","metadata":{"_uuid":"42595abe-492f-483f-88f6-d6ecc9b162d1","_cell_guid":"e5d4d0ae-5511-4f88-a960-6f5d48d30bdd","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}